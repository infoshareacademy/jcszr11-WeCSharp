@using Microsoft.AspNetCore.Identity
@using Schedulist.App.ViewModels
@using Schedulist.DAL.Models
@using Schedulist.DAL.Repositories
@using Schedulist.DAL.Shared
@model MonthViewModel
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@{
    var loggedInUser = await UserManager.GetUserAsync(User);
    var userName = $"{loggedInUser.Name} {loggedInUser.Surname}";
}

<script>
    function openCalendarSidebar(element) {
        closeCalendarSidebars()
        var sidebarId = element.getAttribute('data-sidebar-id');
        var sidebarElement = document.getElementById(sidebarId);
        sidebarElement.style.display = "block";
    }

    function closeCalendarSidebars() {
        @for (int i = 1; i<=31; i++)
        {
            @:closeCalendarSidebar('Day-@i');
        }
    }

    function closeCalendarSidebar(sidebarId) {
        var sidebarElement = document.getElementById(sidebarId);
        sidebarElement.style.display = "none";
    }
</script>

<div class="text-center" style="height: 100vh;">
    <div class="container-fluid d-flex h-100 flex-column" style="padding: 0;">
        <div class="row flex-nowrap month-name-container">
            <div class="button-field">
                <button type="button" class="btn btn-light" onclick="location.href='@Url.Action("PreviousMonth", "Calendar", new {@date = Model.CurrentDate, @userToEdit = Model.UserToEdit})'"><</button>
            </div>
            <div class="button-field">
                <button type="button" class="btn btn-light" onclick="location.href='@Url.Action("NextMonth", "Calendar", new {@date = Model.CurrentDate, @userToEdit = Model.UserToEdit})'">></button>
            </div>
            <div class="month-name">
                @Model.FirstDayOfTheMonth.ToString("MMMM yyyy")
            </div>
            <div class="userNameDisplay">
                <span><strong>Current User:</strong> @userName</span>
            </div>
<div class="calendar-dropdown">
    <div class="dropdown">
        <button id="userButton" class="btn btn-secondary dropdown-toggle user-dropdown" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="width: auto;">
            <span style="color:black">Select User Calendar:</span><span id="userNameDisplay"> @Model.UserNameDisplay</span>
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            @foreach (KeyValuePair<string, string> DropdownUser in Model.UserDict)
            {
                 <a class="dropdown-item" onclick="location.href='@Url.Action("ChangeUser", "Calendar", new {@date = Model.CurrentDate, @userToEdit = DropdownUser.Key})'">@DropdownUser.Value</a>
            }
        </div>
    </div>
</div>
        </div>
        <div class="row flex-nowrap" style="border-left: 1px solid lightgrey;">
            @for (int i = 0; i < 7; i++)
            {
                DateTime drawDayOfWeek = @Model.StartDate.AddDays(i);
                <div class="col calendar-header day-calendar-row-hour">@drawDayOfWeek.DayOfWeek</div>
            }
        </div>
        <div class="row flex-nowrap flex-grow-1" style="border-left: 1px solid lightgrey;">
            @{
                DateTime drawDate = @Model.StartDate;
                int k = 0;
                while (true)
                {
                    if (drawDate >= Model.LastDayOfTheMonth && drawDate.DayOfWeek == DayOfWeek.Sunday)
                    {
                        break;
                    }
                    else
                    {
                        drawDate = @Model.StartDate.AddDays(k);
                        if (k % 7 == 0 && k > 0)
                        {
                            @:</div><div class="row flex-nowrap flex-grow-1" style="border-left: 1px solid lightgrey;">
                        }
                        if (drawDate.Month == @Model.CurrentDate.Month)
                        {
                            int numberOfCalendarEvents = 0;
                            int daysToRemove = 2;
                            List<CalendarEvent> calendarEventForDay = new List<CalendarEvent>();
                            @foreach (CalendarEvent calendarEvent in Model.CalendarEvents)
                            {
                                if (calendarEvent.CalendarEventDate.Day == drawDate.Day)
                                {
                                numberOfCalendarEvents += 1;
                                calendarEventForDay.Add(calendarEvent);
                                }
                            }
                            if (drawDate == DateTime.Today)
                            {
                                <button type="button" class="col calendar-block this-month today" data-sidebar-id="Day-@drawDate.Day" onclick="openCalendarSidebar(this)">
                                <div class="calendar-day-date">
                                    @drawDate.Day
                                </div>
                            <div class="calendar-day-work-mode">
                                        @{WorkMode workModeForThisDay = new WorkMode();}
                                        @foreach (WorkModeForUser workMode in Model.WorkModesToDraw)
                                            {
                                            if (workMode.DateOfWorkMode == DateOnly.FromDateTime(drawDate))
                                                {
                                                    workModeForThisDay = Model.WorkMode.GetWorkModeById(workMode.Id);
                                                }
                                        }
                                        @if (workModeForThisDay != null)
                                        {
                                        @workModeForThisDay.Name;
                                        }
                                    </div>
                                    <div style="height: 100%">
                                    @foreach (CalendarEvent calendarEvent in calendarEventForDay)
                                    {
                                        if (workModeForThisDay.Id == 3 || workModeForThisDay.Id == 5)
                                        {
                                              if (daysToRemove > 0)
                                            {
                                                <div class="calendar-event-for-day-inactive">@calendarEvent.CalendarEventName</div>
                                                daysToRemove -= 1;
                                                numberOfCalendarEvents -= 1;
                                            }
                                            else
                                            {
                                                <div class="calendar-event-for-day-inactive">+@numberOfCalendarEvents</div>
                                                break;
                                            }  
                                        }
                                        else
                                        {
                                            if (daysToRemove > 0)
                                            {
                                                <div class="calendar-event-for-day">@calendarEvent.CalendarEventName</div>
                                                daysToRemove -= 1;
                                                numberOfCalendarEvents -= 1;
                                            }
                                            else
                                            {
                                                <div class="calendar-event-for-day">+@numberOfCalendarEvents</div>
                                                break;
                                            }
                                        }
                                    }
                                    </div>
                                </button>
                            }
                            else
                            {
                                <button type="button" class="col calendar-block this-month" data-sidebar-id="Day-@drawDate.Day" onclick="openCalendarSidebar(this)">
                                    <div class="calendar-day-date">
                                        @drawDate.Day
                                    </div>
                                    <div class="calendar-day-work-mode">
                                            @{string workModeForThisDay = "";}
                                        //     @foreach (WorkModeForUser workMode in Model.WorkModesToDraw)
                                            {
                                            if (workMode.DateOfWorkMode == DateOnly.FromDateTime(drawDate))
                                                {
                                                    workModeForThisDay = Model.WorkMode.GetWorkModeById(workMode.Id).Name;
                                                }
                                        }
                                        @workModeForThisDay
                                    </div>
                                    <div style="height: 100%">
                                    @foreach (CalendarEvent calendarEvent in calendarEventForDay)
                                    {
                                        if (workModeForThisDay == WorkModeNames.SICK_LEAVE || workModeForThisDay == WorkModeNames.HOLIDAY)
                                        {
                                              if (daysToRemove > 0)
                                            {
                                                <div class="calendar-event-for-day-inactive">@calendarEvent.CalendarEventName</div>
                                                daysToRemove -= 1;
                                                numberOfCalendarEvents -= 1;
                                            }
                                            else
                                            {
                                                <div class="calendar-event-for-day-inactive">+@numberOfCalendarEvents</div>
                                                break;
                                            }  
                                        }
                                        else
                                        {
                                            if (daysToRemove > 0)
                                            {
                                                <div class="calendar-event-for-day">@calendarEvent.CalendarEventName</div>
                                                daysToRemove -= 1;
                                                numberOfCalendarEvents -= 1;
                                            }
                                            else
                                            {
                                                <div class="calendar-event-for-day">+@numberOfCalendarEvents</div>
                                                break;
                                            }
                                        }
                                    }
                                    </div>
                                </button>
                            }
                        }
                        else
                        {
                            <button type="button" class="col calendar-block">
                                <div class="calendar-day-date">
                                    @drawDate.Day
                                </div>
                             </button>
                        }
                        k += 1;
                    }
                }
            }
        </div>
    </div>
</div>

@* day sidebar *@
<div>
    @{
        for (int i = 0; i < 31; i++)
        {
            drawDate = Model.FirstDayOfTheMonth.AddDays(i);
            int id = i + 1;
            @:<div id="Day-@id" class="calendar-sidebar-container">
            @:<div class="calendar-sidebar">
            @:<button onclick="closeCalendarSidebars()" class="sidebar-close-button">x</button>
            bool doesHaveEvents = false;
            if (drawDate.Month == Model.CurrentDate.Month)
            {
                <h2 style="padding-bottom: 15px">@DateOnly.FromDateTime(drawDate)</h2>
                <div class="calendar-sidebar-event-container">
                    <button class="btn btn-primary" onclick="location.href='@Url.Action("Day", "Calendar", new {@date = drawDate, @userToEdit = Model.UserToEdit})'">
                        Day view
                    </button>
                    <button class="btn btn-primary" onclick="location.href='@Url.Action("Week", "Calendar", new {@date = drawDate, @userToEdit = Model.UserToEdit})'">
                        Week view
                    </button>
                </div>
                @foreach (CalendarEvent calendarEvent in @Model.CalendarEvents)
                {
                    if (calendarEvent.UserId == @Model.UserToEdit && calendarEvent.CalendarEventDate == DateOnly.FromDateTime(drawDate))
                    {
                        doesHaveEvents = true;
                        <div class="calendar-sidebar-event-container">
                        @calendarEvent.CalendarEventStartTime - @calendarEvent.CalendarEventEndTime<br>
                        @calendarEvent.CalendarEventName<br>
                        @calendarEvent.CalendarEventDescription<br>
                        </div>
                    }
                }
            }
            if (!doesHaveEvents) {
                @:No calendar events
            }
            @:</button>
            <div>
            <button class="btn btn-primary" onclick="location.href='@Url.Action("Create", "Calendar")'">
                Add new event
            </button>
            </div>
            @:</div>
            @:</div>
        }
    }
</div>

